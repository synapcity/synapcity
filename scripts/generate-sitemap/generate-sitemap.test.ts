import { execSync } from 'child_process';
import { mkdtempSync, readFileSync, mkdirSync } from 'fs';
import { join } from 'path';
import { tmpdir } from 'os';

const script = join(__dirname, '..', 'generate-sitemap.ts');
const loader = join(__dirname, '..', '..', 'node_modules', 'ts-node', 'esm.mjs');
const pages = ['/', '/home', '/home/dashboards', '/home/notes'];

function run(cwd: string, env?: NodeJS.ProcessEnv) {
  const publicDir = join(cwd, 'public');
  mkdirSync(publicDir, { recursive: true });
  execSync(`node --loader ${loader} ${script}`, { cwd, env: { ...process.env, ...env }, stdio: 'ignore' });
  const robots = readFileSync(join(publicDir, 'robots.txt'), 'utf8');
  const sitemap = readFileSync(join(publicDir, 'sitemap.xml'), 'utf8');
  return { robots, sitemap };
}

function expectSingleTrailingNewline(text: string) {
  expect(text.endsWith('\n')).toBe(true);
  expect(text.endsWith('\n\n')).toBe(false);
}

describe('generate-sitemap', () => {
  test('uses default domain when SITE_URL is not set', () => {
    const cwd = mkdtempSync(join(tmpdir(), 'sitemap-default-'));
    const { robots, sitemap } = run(cwd);
    const domain = 'https://synapcity.app';

    expect(robots).toContain('# Generated by scripts/generate-sitemap.ts');
    expect(robots).toContain(`Sitemap: ${domain}/sitemap.xml`);
    pages.forEach(page => {
      expect(sitemap).toContain(`<loc>${domain}${page}</loc>`);
    });
    expectSingleTrailingNewline(robots);
    expectSingleTrailingNewline(sitemap);
  });

  test('uses SITE_URL when provided', () => {
    const cwd = mkdtempSync(join(tmpdir(), 'sitemap-env-'));
    const domain = 'https://example.com';
    const { robots, sitemap } = run(cwd, { NODE_ENV: "production", SITE_URL: domain });

    expect(robots).toContain('# Generated by scripts/generate-sitemap.ts');
    expect(robots).toContain(`Sitemap: ${domain}/sitemap.xml`);
    pages.forEach(page => {
      expect(sitemap).toContain(`<loc>${domain}${page}</loc>`);
    });
    expectSingleTrailingNewline(robots);
    expectSingleTrailingNewline(sitemap);
  });
});