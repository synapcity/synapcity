// scripts/generate-sitemap/generate-sitemap.test.ts
import { execSync } from "node:child_process";
import { mkdtempSync, readFileSync, mkdirSync } from "node:fs";
import { join } from "node:path";
import { tmpdir } from "node:os";
import { collectPages } from "./generate-sitemap";

// Loaded from your typed env module so the "default domain" test is deterministic
let env: { NEXT_PUBLIC_SITE_URL: string };
beforeAll(async () => {
  ({ env } = await import("../../src/env"));
});

// Paths
const script = join(__dirname, "generate-sitemap.ts");
const pages = collectPages();

/**
 * Run the sitemap generator in a temp working directory.
 * Uses `tsx` to execute the TS ESM script reliably.
 */
function run(cwd: string, envVars?: NodeJS.ProcessEnv) {
  const publicDir = join(cwd, "public");
  mkdirSync(publicDir, { recursive: true });

  const runEnv: NodeJS.ProcessEnv = {
    ...process.env,
    ...envVars,
  };

  // Explicitly remove the var if test didn't provide it
  if (!envVars || envVars.NEXT_PUBLIC_SITE_URL === undefined) {
    delete runEnv.NEXT_PUBLIC_SITE_URL;
  }

  // Prefer local devDep `tsx` (falls back to npx resolution)
  // Use stdio: 'inherit' so failures are visible in test output.
  try {
    execSync(`npx tsx ${script}`, {
      cwd,
      env: runEnv,
      stdio: "inherit",
    });
  } catch (e) {
    throw new Error(
      `generate-sitemap script failed (cwd: ${cwd}). See output above. ${(e as Error).message}`
    );
  }

  const robots = readFileSync(join(publicDir, "robots.txt"), "utf8");
  const sitemap = readFileSync(join(publicDir, "sitemap.xml"), "utf8");
  return { robots, sitemap };
}

function expectSingleTrailingNewline(text: string) {
  expect(text.endsWith("\n")).toBe(true);
  expect(text.endsWith("\n\n")).toBe(false);
}

describe("generate-sitemap", () => {
  test("uses default domain when NEXT_PUBLIC_SITE_URL is not set", () => {
    const cwd = mkdtempSync(join(tmpdir(), "sitemap-default-"));
    const { robots, sitemap } = run(cwd);
    const domain = env.NEXT_PUBLIC_SITE_URL;

    expect(robots).toContain("# Generated by scripts/generate-sitemap.ts");
    expect(robots).toContain(`Sitemap: ${domain}/sitemap.xml`);
    pages.forEach((page) => {
      expect(sitemap).toContain(`<loc>${domain}${page}</loc>`);
    });
    expectSingleTrailingNewline(robots);
    expectSingleTrailingNewline(sitemap);
  });

  test("uses NEXT_PUBLIC_SITE_URL when provided", () => {
    const cwd = mkdtempSync(join(tmpdir(), "sitemap-env-"));
    const domain = "https://example.com";
    const { robots, sitemap } = run(cwd, {
      NODE_ENV: "production",
      NEXT_PUBLIC_SITE_URL: domain,
    });

    expect(robots).toContain("# Generated by scripts/generate-sitemap.ts");
    expect(robots).toContain(`Sitemap: ${domain}/sitemap.xml`);
    pages.forEach((page) => {
      expect(sitemap).toContain(`<loc>${domain}${page}</loc>`);
    });
    expectSingleTrailingNewline(robots);
    expectSingleTrailingNewline(sitemap);
  });
});
