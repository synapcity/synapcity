import { writeFileSync } from "fs";
import { resolve } from "path";
import { fileURLToPath } from "url";
import { globSync } from "glob";

export function collectPages(): string[] {
  const appDir = fileURLToPath(new URL("../../src/app", import.meta.url));
  const files = globSync("**/page.tsx", { cwd: appDir, nodir: true });

  return files
    .map((file) => file.split("/").slice(0, -1))
    .filter(
      (segments) =>
        !segments.some(
          (s) => s.startsWith("(") || s.startsWith("_") || s.startsWith("[") || s.startsWith("__")
        )
    )
    .map((segments) => "/" + segments.filter((s) => !s.startsWith("(")).join("/"))
    .map((p) => (p === "/" ? "/" : p))
    .sort();
}

export async function generate(outDir = resolve(process.cwd(), "public")) {
  const { env } = await import("../../src/env");
  const SITE_URL = env.NEXT_PUBLIC_SITE_URL;
  const pages = collectPages();

  const urls = pages.map((page) => `  <url><loc>${SITE_URL}${page}</loc></url>`).join("\n");

  const sitemap = `<?xml version="1.0" encoding="UTF-8"?>\n<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">\n${urls}\n</urlset>\n`;
  writeFileSync(resolve(outDir, "sitemap.xml"), sitemap);

  const robots = `# Generated by scripts/generate-sitemap.ts\nUser-agent: *\nAllow: /\n\nSitemap: ${SITE_URL}/sitemap.xml\n`;
  writeFileSync(resolve(outDir, "robots.txt"), robots);
}

if (fileURLToPath(import.meta.url) === resolve(process.argv[1] || "")) {
  generate();
}
